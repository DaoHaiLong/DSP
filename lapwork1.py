import matplotlib.pyplot as plt
from scipy import fftpack
import numpy as np
from scipy.fftpack.basic import fft

Input_1kHz_15kHz =[
+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
-0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
-0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
-0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
+0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
-0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
-0.8660254038, -0.4619397663, -1.3194792169, -1.1827865776, -0.5000000000, -1.1827865776, -1.3194792169, -0.4619397663, 
-0.8660254038, -1.2552931065, -0.3535533906, -0.4174197128, -1.0000000000, -0.1913417162, +0.0947343455, -0.5924659585, 
-0.0000000000, +0.5924659585, -0.0947343455, +0.1913417162, +1.0000000000, +0.4174197128, +0.3535533906, +1.2552931065, 
+0.8660254038, +0.4619397663, +1.3194792169, +1.1827865776, +0.5000000000, +1.1827865776, +1.3194792169, +0.4619397663, 
+0.8660254038, +1.2552931065, +0.3535533906, +0.4174197128, +1.0000000000, +0.1913417162, -0.0947343455, +0.5924659585, 
+0.0000000000, -0.5924659585, +0.0947343455, -0.1913417162, -1.0000000000, -0.4174197128, -0.3535533906, -1.2552931065, 
]

Impulse_response = [
  -0.0018225230, -0.0015879294, +0.0000000000, +0.0036977508, +0.0080754303, +0.0085302217, -0.0000000000, -0.0173976984,
  -0.0341458607, -0.0333591565, +0.0000000000, +0.0676308395, +0.1522061835, +0.2229246956, +0.2504960933, +0.2229246956,
  +0.1522061835, +0.0676308395, +0.0000000000, -0.0333591565, -0.0341458607, -0.0173976984, -0.0000000000, +0.0085302217,
  +0.0080754303, +0.0036977508, +0.0000000000, -0.0015879294, -0.0018225230
]

ECG = [
    0, 0.0010593, 0.0021186, 0.003178, 0.0042373, 0.0052966, 0.0063559,
    0.0074153, 0.0084746, 0.045198, 0.081921, 0.11864, 0.15537, 0.19209,
    0.22881, 0.26554, 0.30226, 0.33898, 0.30226, 0.26554, 0.22881, 0.19209,
    0.15537, 0.11864, 0.081921, 0.045198, 0.0084746, 0.0077684, 0.0070621,
    0.0063559, 0.0056497, 0.0049435, 0.0042373, 0.0035311, 0.0028249,
    0.0021186, 0.0014124, 0.00070621, 0, -0.096045, -0.19209, -0.28814,
    -0.073446, 0.14124, 0.35593, 0.57062, 0.78531, 1, 0.73729, 0.47458,
    0.21186, -0.050847, -0.31356, -0.57627, -0.83898, -0.55932, -0.27966, 0,
    0.00073692, 0.0014738, 0.0022108, 0.0029477, 0.0036846, 0.0044215,
    0.0051584, 0.0058954, 0.0066323, 0.0073692, 0.0081061, 0.008843, 0.00958,
    0.010317, 0.011054, 0.011791, 0.012528, 0.013265, 0.014001, 0.014738,
    0.015475, 0.016212, 0.016949, 0.03484, 0.052731, 0.070621, 0.088512,
    0.1064, 0.12429, 0.14218, 0.16008, 0.17797, 0.16186, 0.14576, 0.12966,
    0.11356, 0.097458, 0.081356, 0.065254, 0.049153, 0.033051, 0.016949,
    0.013559, 0.010169, 0.0067797, 0.0033898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0010593, 0.0021186, 0.003178,
    0.0042373, 0.0052966, 0.0063559, 0.0074153, 0.0084746, 0.045198, 0.081921,
    0.11864, 0.15537, 0.19209, 0.22881, 0.26554, 0.30226, 0.33898, 0.30226,
    0.26554, 0.22881, 0.19209, 0.15537, 0.11864, 0.081921, 0.045198, 0.0084746,
    0.0077684, 0.0070621, 0.0063559, 0.0056497, 0.0049435, 0.0042373,
    0.0035311, 0.0028249, 0.0021186, 0.0014124, 0.00070621, 0, -0.096045,
    -0.19209, -0.28814, -0.073446, 0.14124, 0.35593, 0.57062, 0.78531, 1,
    0.73729, 0.47458, 0.21186, -0.050847, -0.31356, -0.57627, -0.83898,
    -0.55932, -0.27966, 0, 0.00073692, 0.0014738, 0.0022108, 0.0029477,
    0.0036846, 0.0044215, 0.0051584, 0.0058954, 0.0066323, 0.0073692,
    0.0081061, 0.008843, 0.00958, 0.010317, 0.011054, 0.011791, 0.012528,
    0.013265, 0.014001, 0.014738, 0.015475, 0.016212, 0.016949, 0.03484,
    0.052731, 0.070621, 0.088512, 0.1064, 0.12429, 0.14218, 0.16008, 0.17797,
    0.16186, 0.14576, 0.12966, 0.11356, 0.097458, 0.081356, 0.065254, 0.049153,
    0.033051, 0.016949, 0.013559, 0.010169, 0.0067797, 0.0033898, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0010593,
    0.0021186, 0.003178, 0.0042373, 0.0052966, 0.0063559, 0.0074153, 0.0084746,
    0.045198, 0.081921, 0.11864, 0.15537, 0.19209, 0.22881, 0.26554, 0.30226,
    0.33898, 0.30226, 0.26554, 0.22881, 0.19209, 0.15537, 0.11864, 0.081921,
    0.045198, 0.0084746, 0.0077684, 0.0070621, 0.0063559, 0.0056497, 0.0049435,
    0.0042373, 0.0035311, 0.0028249, 0.0021186, 0.0014124, 0.00070621, 0,
    -0.096045, -0.19209, -0.28814, -0.073446, 0.14124, 0.35593, 0.57062,
    0.78531, 1, 0.73729, 0.47458, 0.21186, -0.050847, -0.31356, -0.57627,
    -0.83898, -0.55932, -0.27966, 0, 0.00073692, 0.0014738, 0.0022108,
    0.0029477, 0.0036846, 0.0044215, 0.0051584, 0.0058954, 0.0066323,
    0.0073692, 0.0081061, 0.008843, 0.00958, 0.010317, 0.011054, 0.011791,
    0.012528, 0.013265, 0.014001, 0.014738, 0.015475, 0.016212, 0.016949,
    0.03484, 0.052731, 0.070621, 0.088512, 0.1064, 0.12429, 0.14218, 0.16008,
    0.17797, 0.16186, 0.14576, 0.12966, 0.11356, 0.097458, 0.081356, 0.065254,
    0.049153, 0.033051, 0.016949, 0.013559, 0.010169, 0.0067797, 0.0033898, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0.0010593, 0.0021186, 0.003178, 0.0042373, 0.0052966, 0.0063559, 0.0074153,
    0.0084746, 0.045198, 0.081921, 0.11864, 0.15537, 0.19209, 0.22881, 0.26554,
    0.30226, 0.33898, 0.30226, 0.26554, 0.22881, 0.19209, 0.15537, 0.11864,
    0.081921, 0.045198, 0.0084746, 0.0077684, 0.0070621, 0.0063559, 0.0056497,
    0.0049435, 0.0042373, 0.0035311, 0.0028249, 0.0021186, 0.0014124,
    0.00070621, 0, -0.096045, -0.19209, -0.28814, -0.073446, 0.14124, 0.35593,
    0.57062, 0.78531, 1, 0.73729, 0.47458, 0.21186, -0.050847, -0.31356,
    -0.57627, -0.83898, -0.55932, -0.27966, 0, 0.00073692, 0.0014738,
    0.0022108, 0.0029477, 0.0036846, 0.0044215, 0.0051584, 0.0058954,
    0.0066323, 0.0073692, 0.0081061, 0.008843, 0.00958, 0.010317, 0.011054,
    0.011791, 0.012528, 0.013265, 0.014001, 0.014738, 0.015475, 0.016212,
    0.016949, 0.03484, 0.052731, 0.070621, 0.088512, 0.1064, 0.12429, 0.14218,
    0.16008, 0.17797, 0.16186, 0.14576, 0.12966, 0.11356, 0.097458, 0.081356,
    0.065254, 0.049153, 0.033051, 0.016949, 0.013559, 0.010169, 0.0067797,
    0.0033898, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0.0010593, 0.0021186, 0.003178, 0.0042373, 0.0052966,
    0.0063559, 0.0074153, 0.0084746, 0.045198, 0.081921, 0.11864, 0.15537,
    0.19209, 0.22881, 0.26554, 0.30226, 0.33898, 0.30226, 0.26554, 0.22881,
    0.19209, 0.15537, 0.11864, 0.081921, 0.045198, 0.0084746, 0.0077684,
    0.0070621, 0.0063559, 0.0056497, 0.0049435, 0.0042373, 0.0035311,
    0.0028249, 0.0021186, 0.0014124, 0.00070621, 0, -0.096045, -0.19209,
    -0.28814, -0.073446, 0.14124, 0.35593, 0.57062, 0.78531, 1, 0.73729,
    0.47458, 0.21186, -0.050847, -0.31356, -0.57627, -0.83898, -0.55932,
    -0.27966, 0, 0.00073692, 0.0014738, 0.0022108, 0.0029477, 0.0036846,
    0.0044215, 0.0051584, 0.0058954, 0.0066323, 0.0073692, 0.0081061, 0.008843,
    0.00958, 0.010317, 0.011054, 0.011791, 0.012528, 0.013265, 0.014001,
    0.014738, 0.015475, 0.016212, 0.016949, 0.03484, 0.052731, 0.070621,
    0.088512, 0.1064, 0.12429, 0.14218, 0.16008, 0.17797, 0.16186, 0.14576,
    0.12966, 0.11356, 0.097458, 0.081356, 0.065254, 0.049153, 0.033051,
    0.016949, 0.013559, 0.010169, 0.0067797, 0.0033898, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]

#----------------------------------------Convert to frequency (FFT)--------------------------------------------------#
X = fftpack.fft(Input_1kHz_15kHz)
H = fftpack.fft(Impulse_response)
G=fftpack.fft(ECG)

#------------------------------------------------------------Task-----------------------------------------------------#

class support:
    
    def padding_array(array, length):   # zero-padding
        x = length - len(array)
        return np.pad(array, pad_width=(0, x), mode='constant')

    def set_swaptwohalves(signalandsystem):        # swaptwohalves
        midshape=len(signalandsystem)/2
        length=len(signalandsystem)
        new_shape=[]
        for i in range(int(midshape),int (length)):
            new_shape.append(signalandsystem[i])
        for i in range(int(midshape)):
            new_shape.append(signalandsystem[i])
        return new_shape
#------------------------------------------------------------Signal-----------------------------------------------------#

class signal:
    
    def Inputsignal():
        plt.title('time domain signal')
        plt.plot(Input_1kHz_15kHz)
        plt.show()
        
    def real_signal():
        plt.title('real signal')
        plt.plot(support.set_swaptwohalves( np.real(X)))
        plt.show()  
         
    def imaginary():
        plt.title('imaginary signal')
        plt.plot(support.set_swaptwohalves(np.imag(X)))
        plt.show()                                             
        
    def magnitude():
        plt.title('magnitude signal')
        plt.plot(support.set_swaptwohalves( np.abs(X)))
        plt.show()
    
    def phase():
        plt.title('phase signal')
        plt.plot( support.set_swaptwohalves( np.angle(X)))
        plt.show()  
        
    def inverse():
        plt.title('inverse signal')
        plt.plot(fftpack.ifft(X) )
        plt.show()
        
    def frequence():
        freqs = fftpack.fftfreq(len(Input_1kHz_15kHz)) * 100
        fig, ax = plt.subplots()
        ax.stem( freqs, np.abs(X))
        ax.set_xlim(-100 / 2,100 / 2)
        plt.title('frequency signal')
        plt.show()
   
#------------------------------------------------------------System-----------------------------------------------------#

class system:
    
    def Inputsystem():
        plt.title('Impulse response')
        plt.plot(Impulse_response)
        plt.show()
        
    def real_system():
        plt.title('real system')
        plt.plot( support.set_swaptwohalves( np.real(H)))
        plt.show()
        
    def magnitude():
        plt.title('magnitude system')
        plt.plot( support.set_swaptwohalves( np.abs(H)))
        plt.show()
    
    def imaginary():
        plt.title('imaginary system')
        plt.plot( support.set_swaptwohalves(np.imag(H)))
        plt.show()   
        
        
    def phase():
        plt.title('phase system')
        plt.plot( support.set_swaptwohalves( np.angle(H)))
        plt.show()  
        
    def inverse():
        plt.title('inverse system')
        plt.plot(fftpack.ifft(H) )
        plt.show()
        
    def frequence():
        freqs = fftpack.fftfreq(len(Impulse_response)) * 100
        fig, ax = plt.subplots()
        ax.stem( freqs, np.abs(H))
        ax.set_xlim(-100 / 2,100 / 2)
        plt.title('frequency system')
        plt.show()

#----------------------------------------Calc convo and multfreq of input and impluse------------------------------------------#

def convolution():
    output=np.convolve(Impulse_response,Input_1kHz_15kHz)
    print("convoIn",len(output))
    plt.title('convolution')
    plt.plot(output)
    plt.show()
       
def multiplication_frequency():
    # convolution
    output=np.convolve(Impulse_response,Input_1kHz_15kHz)
    
    # set new input and impulse with padding-zero
    paddingimpulse= support.padding_array(Impulse_response,len(output))
    paddingInput= support.padding_array(Input_1kHz_15kHz,len(output))    
       
    # Calculate H(k) = F {h(n)} and X(k) = F {x(n)}     
    new_Impulse=fftpack.fft(paddingimpulse)
    new_paddingInput=fftpack.fft(paddingInput)
    
    # Calculate the final output in frequency domain
    freq_multi=np.multiply(new_paddingInput,new_Impulse)
    freq_multf=fftpack.ifft(freq_multi)
    
    # plot
    plt.title('frequency_multiplication')
    plt.plot(freq_multf)
    print("multInpu",len(freq_multi))
    plt.show()
    
#------------------------------------------------------------ECG-----------------------------------------------------#

class ECGS:
    
    def plotECG():
        plt.title('ECG in time')
        plt.plot(ECG)
        plt.show()
         
    def real():
        plt.title('real ECG')
        plt.plot( support.set_swaptwohalves( np.real(G)))
        plt.show()
        
    def magnitude():
        plt.title('magnitude ECG')
        plt.plot( support.set_swaptwohalves( np.abs(G)))
        plt.show()
    
    def imaginary():
        plt.title('imaginary ECG')
        plt.plot( support.set_swaptwohalves(np.imag(G)))
        plt.show()   
          
    def phase():
        plt.title('phase ECG')
        plt.plot( support.set_swaptwohalves( np.angle(G)))
        plt.show()  
        
    def inverse():
        plt.title('inverse ECG')
        plt.plot(fftpack.ifft(G) )
        plt.show()
    
    def frequency():
        freqs = fftpack.fftfreq(len(ECG)) * 100
        fig, ax = plt.subplots()
        ax.stem( freqs, np.abs(G))
        ax.set_xlim(-100 / 2,100 / 2)
        plt.title('frequency ECG')
        plt.show()
        
    def convolution_ECG():
        output=np.convolve(Impulse_response,ECG)
        print("convuECG",len(output))
        plt.title('convolution_ECG')
        plt.plot(output)
        plt.show()
    
    def multiplication_frequencyECG():
        output=np.convolve(Impulse_response,ECG)
        
        paddingimpulse= support.padding_array(Impulse_response,len(output))
        paddingECG= support.padding_array(ECG,len(output))
        
        new_padding=fftpack.fft(paddingimpulse)
        new_padding_ECG=fftpack.fft(paddingECG)
        
        freq_multi=np.multiply(new_padding_ECG,new_padding)
        freq_multf=fftpack.ifft(freq_multi)
        plt.title('frequency_multiplication_ECG')
        plt.plot(freq_multf)
        print("multECG",len(freq_multf))
        plt.show()
        
#------------------------------------------------------------Main-----------------------------------------------------#            

if __name__ == '__main__':   
    #----------------------------signal------------------------------------  
     signal.Inputsignal()
     signal.frequence()
     signal.real_signal()
     signal.imaginary()
     signal.magnitude()
     signal.phase()
     signal.inverse()
     
    #----------------------------system------------------------------------  
     system. Inputsystem()
     system.frequence()
     system.real_system()
     system.imaginary()
     system.magnitude()
     system.phase()
     system.inverse()
     
     #--------------------------Convolution and mulfrequency-----------------
     convolution()
     multiplication_frequency()
     
    #----------------------------ECG--------------------------------
     ECGS.plotECG()
     ECGS.frequency()
     ECGS.real()
     ECGS.imaginary()
     ECGS.magnitude()
     ECGS.phase()
     ECGS.convolution_ECG()
     ECGS.multiplication_frequencyECG()
     
   